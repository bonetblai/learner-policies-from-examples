(define (domain blocksworld)
    (:requirements :strips)
    (:predicates
        (clear ?x)
        (on-table ?x)
        (arm-empty)
        (holding ?x)
        (on ?x ?y)
        (markable-0 ?x)
        (markable-1 ?x)
        (mark-0 ?x)
        (mark-1 ?x)
        (mark ?x)
        (some-mark-0)
        (some-mark-1)
    )
    (:action pickup
        :parameters (?ob)
        :precondition (and (clear ?ob) (on-table ?ob) (arm-empty) (mark ?ob))
        :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) (not (arm-empty)))
    )
    (:action putdown
        :parameters (?ob)
        :precondition (and (holding ?ob) (mark ?ob))
        :effect (and (clear ?ob) (arm-empty) (on-table ?ob) (not (holding ?ob)))
    )
    (:action stack
        :parameters (?ob ?underob)
        :precondition (and (clear ?underob) (holding ?ob) (mark ?ob) (mark ?underob))
        :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob) (not (clear ?underob)) (not (holding ?ob)))
    )
    (:action unstack
        :parameters (?ob ?underob)
        :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty) (mark ?ob))
        :effect (and (holding ?ob) (clear ?underob) (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))
    )
    (:action mark-0
        :parameters (?x)
        :precondition (and (markable-0 ?x) (not (mark ?x)) (not (some-mark-0)))
        :effect (and (mark-0 ?x) (not (markable-0 ?x)) (mark ?x) (some-mark-0) (forall (?z) (and (markable-1 ?z) (when (mark-1 ?z) (and (not (mark-1 ?z)) (not (mark ?z)))))) (not (some-mark-1)))
    )
    (:action mark-1
        :parameters (?x)
        :precondition (and (markable-1 ?x) (not (mark ?x)) (not (some-mark-1)) (some-mark-0))
        :effect (and (mark-1 ?x) (not (markable-1 ?x)) (mark ?x) (some-mark-1))
    )
    (:action move-mark-0
        :parameters (?x ?y)
        :precondition (and (mark-0 ?x) (markable-0 ?y) (not (mark ?y)))
        :effect (and (not (mark-0 ?x)) (not (mark ?x)) (mark-0 ?y) (not (markable-0 ?y)) (mark ?y) (forall (?z) (and (markable-1 ?z) (when (mark-1 ?z) (and (not (mark-1 ?z)) (not (mark ?z)))))) (not (some-mark-1)))
    )
    (:action move-mark-1
        :parameters (?x ?y)
        :precondition (and (mark-1 ?x) (markable-1 ?y) (not (mark ?y)))
        :effect (and (not (mark-1 ?x)) (not (mark ?x)) (mark-1 ?y) (not (markable-1 ?y)) (mark ?y))
    )
)
