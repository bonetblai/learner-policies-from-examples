(define (problem prob-snack) 
    (:domain child-snack) 
    (:objects child3 child1 child2 child4 bread4 bread3 bread2 bread1 content2 content1 content4 content3 tray1 table1 table2 table3 sandw1 sandw3 sandw2 sandw4) 
    (:init (place_t kitchen) (child_t child3) (child_t child1) (child_t child2) (child_t child4) (bread_portion_t bread4) (bread_portion_t bread3) (bread_portion_t bread2) (bread_portion_t bread1) (content_portion_t content2) (content_portion_t content1) (content_portion_t content4) (content_portion_t content3) (tray_t tray1) (place_t table1) (place_t table2) (place_t table3) (sandwich_t sandw1) (sandwich_t sandw3) (sandwich_t sandw2) (sandwich_t sandw4) (at tray1 kitchen) (at_kitchen_bread bread1) (at_kitchen_bread bread2) (at_kitchen_bread bread3) (at_kitchen_bread bread4) (at_kitchen_content content1) (at_kitchen_content content2) (at_kitchen_content content3) (at_kitchen_content content4) (no_gluten_bread bread2) (no_gluten_bread bread4) (no_gluten_bread bread1) (no_gluten_bread bread3) (no_gluten_content content4) (no_gluten_content content1) (no_gluten_content content3) (no_gluten_content content2) (allergic_gluten child4) (allergic_gluten child1) (allergic_gluten child2) (allergic_gluten child3) (waiting child1 table1) (waiting child2 table3) (waiting child3 table3) (waiting child4 table2) (notexist sandw1) (notexist sandw2) (notexist sandw3) (notexist sandw4) ) 
    (:goal (and (served child1) (served child2) (served child3) (served child4) ) ) )
